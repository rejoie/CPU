`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 2020/12/28 16:41:41
// Design Name: 
// Module Name: INSTMEM
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////


module INSTMEM(Addr,Inst);
input [31:0]Addr;
output [31:0]Inst;
wire [31:0]Rom[31:0];
assign Rom[5'b00000]=32'b00100000001000100000000000000100;//addi $2,$1,0x4 ->$2=0x4
assign Rom[5'b00001]=32'b00110100101000010000000000001111;//ori $1,$3,0xF ->$1=0xF
assign Rom[5'b00010]=32'b00000000001000100001100000100010;//sub $3,$1,$2 ->$3=0xB
assign Rom[5'b00011]=32'b00110000001001000000000000000111;//andi $4,$1,0x7 ->$4=0x7
assign Rom[5'b00100]=32'b00000000001000110010100000100000;//add $5,$1,$3 ->$5=0x1a
assign Rom[5'b00101]=32'b00000000001000100011000000100100;//and $6,$1,$2 ->$6=0x4
assign Rom[5'b00110]=32'b00010000010001100000000000000001;//beq $2,$6,0x1 ->跳过下一个指令
assign Rom[5'b00111]=32'b00000000010000110011100000100101;//or $7,$2,$3 ->$7=11,如果没问题，这条会被跳过
assign Rom[5'b01000]=32'b00000000010001000011100000100101;//or $7,$2,$4 ->$7=7
assign Rom[5'b01001]=32'b10101101000001010000000000000000;//sw $5,$8,0 ->memory[$8+0]=$5
assign Rom[5'b01010]=32'b10001101001010000000000000000000;//lw $8,$9,0 ->$8=memory[$9+0]
assign Rom[5'b01011]=32'b00001000000000000000000000001111;//j 0xf 也就是跳到下面43行
assign Rom[5'b01100]=32'b00110000010000010000000000000000;//andi $1,$2,0 ->$1=0
assign Rom[5'b01101]=32'b00000000000000000000000000000000;
assign Rom[5'b01110]=32'b00000000000000000000000000000000;
assign Rom[5'b01111]=32'b00000000000000000000000000000000;
assign Rom[5'b10000]=32'b00000000010001000100100000100110;//xor $9,$2,$4 ->$9=3
assign Rom[5'b10001]=32'b00000000000001010101000100000000;//sll $10,$5,0x4 ->$10=$5<<4
assign Rom[5'b10010]=32'b00000000000001010101100100000010;//srl $11,$5,0x4 ->$11=$5>>4
assign Rom[5'b10011]=32'b00111100000011001111010101100111;//lui $12,0xf567 ->设置高位
assign Rom[5'b10100]=32'b00111000011011010000000000000100;//xori $13,$3,0x4 ->$13=$3^4
assign Rom[5'b10101]=32'b00000000000011000111001000000011;//sra $14,$12,0x8 ->$14=$12>>8（符号扩展）
assign Rom[5'b10110]=32'b00000000000000000000000000000000;
assign Rom[5'b10111]=32'b00000000000000000000000000000000;
assign Rom[5'b11000]=32'b00000000000000000000000000000000;
assign Rom[5'b11001]=32'b00000000000000000000000000000000;
assign Rom[5'b11010]=32'b00000000000000000000000000000000;
assign Rom[5'b11011]=32'b00000000000000000000000000000000;
assign Rom[5'b11100]=32'b00000000000000000000000000000000;
assign Rom[5'b11101]=32'b00000000000000000000000000000000;
assign Rom[5'b11110]=32'b00000000000000000000000000000000;
assign Rom[5'b11111]=32'b00000000000000000000000000000000;
//存32条指令
assign Inst=Rom[Addr[6:2]];
endmodule
