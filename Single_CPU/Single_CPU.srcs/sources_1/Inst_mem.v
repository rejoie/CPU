`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date:    13:49:16 01/04/2014 
// Design Name: 
// Module Name:    Inst_mem 
// Project Name: 
// Target Devices: 
// Tool versions: 
// Description: 
//
// Dependencies: 
//
// Revision: 
// Revision 0.01 - File Created
// Additional Comments: 
//
//////////////////////////////////////////////////////////////////////////////////
module Inst_mem(
		input  [31:0] address,
		output [31:0] inst
    );
	 
	 wire [31:0] ram [0:12];

     assign ram[5'h00] = 32'b001000_00000_00001_0000000000001000; //addi  R1 ,0x1234             
	 assign ram[5'h01] = 32'b001101_00000_00010_0000000000000010; //ori R1 , R1 , 0x5678
	 assign ram[5'h02] = 32'b000000_00010_00001_00011_00000_100000; //lui  R2 ,0xaaaa
	 assign ram[5'h03] = 32'b000000_00011_00010_00101_00000_100010; //ori R2 , R2 , 0xbbbb
	 assign ram[5'h04] = 32'b000000_00101_00010_00100_00000_100100; //add R3 , R1 , R2
	 assign ram[5'h05] = 32'b000000_00100_00010_01000_00000_100101; //sub R3 , R1 , R
	 //assign ram[5'h06] = 32'b000101_01000_00001_0000000000000000; //and R3 , R1 , R2
	 assign ram[5'h06] = 32'b000101_01000_00001_1111111111111110; //and R3 , R1 , R2
	 assign ram[5'h07] = 32'b001000_00111_00111_0000000000001000; //or R3 , R1 , R2
	 assign ram[5'h08] = 32'b000100_00111_00001_1111111111111110; //xor R3 , R1 , R2
	 assign ram[5'h09] = 32'b101011_00001_00010_0000000000000100; //sll R3 , R2 , 4
	 assign ram[5'h0a] = 32'b100011_00001_01001_0000000000000100; //srl R3 , R2 , 4
	 assign ram[5'h0b] = 32'b000010_00000_00000_0000000000001100; //sra R3 , R2 , 4	 
	 assign ram[5'h0c] = 32'b001000_00000_01010_0000000000001010; //addi R3 , R1 , 0x1234

//	 assign ram[5'h00] = 32'b001111_00000_00001_0001001000110100; //lui  R1 ,0x1234             
//	 assign ram[5'h01] = 32'b001101_00001_00001_0101011001111000; //ori R1 , R1 , 0x5678

//	 assign ram[5'h02] = 32'b001111_00000_00010_1010101010101010; //lui  R2 ,0xaaaa
//	 assign ram[5'h03] = 32'b001101_00010_00010_1011101110111011; //ori R2 , R2 , 0xbbbb
//	 assign ram[5'h04] = 32'b000000_00001_00010_00011_00000_100000; //add R3 , R1 , R2
//	 assign ram[5'h05] = 32'b000000_00001_00010_00011_00000_100010; //sub R3 , R1 , R2
//	 assign ram[5'h06] = 32'b000000_00001_00010_00011_00000_100100; //and R3 , R1 , R2
//	 assign ram[5'h07] = 32'b000000_00001_00010_00011_00000_100101; //or R3 , R1 , R2
//	 assign ram[5'h08] = 32'b000000_00001_00010_00011_00000_100110; //xor R3 , R1 , R2
//	 assign ram[5'h09] = 32'b000000_00000_00010_00011_00100_000000; //sll R3 , R2 , 4
//	 assign ram[5'h0a] = 32'b000000_00000_00010_00011_00100_000010; //srl R3 , R2 , 4
//	 assign ram[5'h0b] = 32'b000000_00000_00010_00011_00100_000011; //sra R3 , R2 , 4
	 	 
//	 assign ram[5'h0c] = 32'b001000_00001_00011_0001001000110100; //addi R3 , R1 , 0x1234
//	 assign ram[5'h0d] = 32'b001100_00001_00011_0000000011101111; //andi R3 , R1 , 0xef
//	 assign ram[5'h0e] = 32'b001101_00001_00011_0000000011101111; //ori R3 , R1 , 0xef
//	 assign ram[5'h0f] = 32'b001110_00001_00011_0000000011101111; //xori R3 , R1 , 0xef
	 
//	 assign ram[5'h10] = 32'b000000_00011_00011_00011_00000_100110; //xor R3 , R3 , R3
//	 assign ram[5'h11] = 32'b101011_00011_00001_0000000000000001; //sw R1 , 1(R3)

//	 assign ram[5'h12] = 32'b100100_00011_00101_0000000000000001; //lw R5 , 1(R3)
	 
	 assign inst = ram[address[6:2]];

endmodule
